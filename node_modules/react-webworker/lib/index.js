"use strict";

exports.__esModule = true;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _React$createContext = _react2.default.createContext(),
    Consumer = _React$createContext.Consumer,
    Provider = _React$createContext.Provider;

var WebWorker = function (_React$Component) {
  _inherits(WebWorker, _React$Component);

  function WebWorker(props) {
    _classCallCheck(this, WebWorker);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.onMessage = function (message) {
      if (!_this.mounted) return;
      var data = _this.props.parser ? _this.props.parser(message.data) : message.data;
      var date = new Date();
      _this.setState(function (state) {
        return { data: data, error: undefined, messages: state.messages.concat({ data: data, date: date }), updatedAt: date };
      }, function () {
        return _this.props.onMessage && _this.props.onMessage(data);
      });
    };

    _this.onError = function (_ref) {
      var error = _ref.error;

      if (!_this.mounted) return;
      var date = new Date();
      _this.setState(function (state) {
        return { error: error, errors: state.errors.concat({ error: error, date: date }), updatedAt: date };
      }, function () {
        return _this.props.onError && _this.props.onError(error);
      });
    };

    _this.postMessage = function (data) {
      var _this$props$serialize = _this.props.serializer,
          serializer = _this$props$serialize === undefined ? function (x) {
        return x;
      } : _this$props$serialize;

      var _ref2 = _this.worker || {},
          postMessage = _ref2.postMessage;

      if (!postMessage) throw new Error("Worker not initialized");
      if (_this.worker.state && _this.worker.state !== "activated") return;
      _this.setState({ lastPostAt: new Date() }, function () {
        return _this.messageChannel ? postMessage.call(_this.worker, serializer(data), [_this.messageChannel.port2]) : postMessage.call(_this.worker, serializer(data));
      });
    };

    _this.state = {
      messages: [],
      errors: [],
      data: undefined,
      error: undefined,
      updatedAt: undefined,
      lastPostAt: undefined,
      postMessage: _this.postMessage
    };
    return _this;
  }

  WebWorker.prototype.componentDidMount = function componentDidMount() {
    var _props = this.props,
        url = _props.url,
        options = _props.options,
        worker = _props.worker;

    this.worker = url ? new window.Worker(url, options) : worker.controller || worker;

    if ("onmessage" in this.worker) {
      this.worker.onmessage = this.onMessage;
      this.worker.onerror = this.onError;
    } else {
      this.messageChannel = new window.MessageChannel();
      this.messageChannel.port1.onmessage = this.onMessage;
      this.messageChannel.port1.onmessageerror = this.onError;
    }

    this.mounted = true;
  };

  WebWorker.prototype.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
    this.props.worker || this.worker.terminate();
  };

  WebWorker.prototype.render = function render() {
    var children = this.props.children;

    if (typeof children === "function") {
      return _react2.default.createElement(
        Provider,
        { value: this.state },
        children(this.state)
      );
    }
    if (children !== undefined && children !== null) {
      return _react2.default.createElement(
        Provider,
        { value: this.state },
        children
      );
    }
    return null;
  };

  return WebWorker;
}(_react2.default.Component);

/**
 * Renders only when no message or error has been received yet
 *
 * @prop {boolean} persist Show until we have data, even when an error occurred
 * @prop {Function|Node} children Function (passing state) or React node
 */


WebWorker.Pending = function (_ref3) {
  var children = _ref3.children,
      persist = _ref3.persist;
  return _react2.default.createElement(
    Consumer,
    null,
    function (state) {
      if (state.data !== undefined) return null;
      if (!persist && state.error !== undefined) return null;
      return typeof children === "function" ? children(state) : children || null;
    }
  );
};

/**
 * Renders only when worker has sent a message with data
 *
 * @prop {Function|Node} children Function (passing data and state) or React node
 */
WebWorker.Data = function (_ref4) {
  var children = _ref4.children;
  return _react2.default.createElement(
    Consumer,
    null,
    function (state) {
      if (state.data === undefined) return null;
      return typeof children === "function" ? children(state.data, state) : children || null;
    }
  );
};

/**
 * Renders only when worker has sent an error
 *
 * @prop {Function|Node} children Function (passing error and state) or React node
 */
WebWorker.Error = function (_ref5) {
  var children = _ref5.children;
  return _react2.default.createElement(
    Consumer,
    null,
    function (state) {
      if (state.error === undefined) return null;
      return typeof children === "function" ? children(state.error, state) : children || null;
    }
  );
};

exports.default = WebWorker;